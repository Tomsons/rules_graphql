ROUTER_REPOSITORY = {
    "linux_aarch64": {
        "url": "https://github.com/apollographql/router/releases/download/v{version}/router-v{version}-aarch64-unknown-linux-gnu.tar.gz",
        "exec_compatible_with": [
            "@platforms//os:linux",
            "@platforms//cpu:arm64",
        ],
        "target_compatible_with": [
            "@platforms//os:linux",
            "@platforms//cpu:arm64",
        ]
    },
    "darwin": {
        "url": "https://github.com/apollographql/router/releases/download/v{version}/router-v{version}-x86_64-apple-darwin.tar.gz",
        "exec_compatible_with": [
            "@platforms//os:macos",
        ],
        "target_compatible_with": [
            "@platforms//os:macos",
        ]
    },
    "linux_x86_64": {
        "url": "https://github.com/apollographql/router/releases/download/v{version}/router-v{version}-x86_64-unknown-linux-gnu.tar.gz",
        "exec_compatible_with": [
            "@platforms//os:linux",
            "@platforms//cpu:x86_64"
        ],
        "target_compatible_with": [
            "@platforms//os:linux",
            "@platforms//cpu:x86_64"
        ]
    },
}

def _toolchains_repo_impl(repository_ctx):
    starlark_content = """# Generated by toolchains_repo.bzl

# Forward all the providers
def _resolved_toolchain_impl(ctx):
    toolchain_info = ctx.toolchains["@{root_repository_name}//:{toolchain_type_name}"]
    return [
        toolchain_info
    ]

resolved_toolchain = rule(
    implementation = _resolved_toolchain_impl,
    toolchains = ["@{root_repository_name}//:{toolchain_type_name}"],
    incompatible_use_toolchain_transition = True,
)
""".format(
               tool = repository_ctx.attr.tool,
               repository_name = repository_ctx.attr.repository_name,
               toolchain_name = repository_ctx.attr.toolchain_name,
               root_repository_name = repository_ctx.attr.root_repository_name,
               toolchain_type_name = repository_ctx.attr.toolchain_type_name,
           )
    repository_ctx.file("defs.bzl", starlark_content)

    build_content = """# Generated by toolchains_repo.bzl
#
# These can be registered in the workspace file or passed to --extra_toolchains flag.
# By default all these toolchains are registered by the swc_register_toolchains macro
# so you don't normally need to interact with these targets.

load(":defs.bzl", "resolved_toolchain")

resolved_toolchain(name = "resolved_toolchain", visibility = ["//visibility:public"])

"""

    for [platform, meta] in ROUTER_REPOSITORY.items():
        build_content += """
toolchain(
    name = "{tool}_{platform}_toolchain",
    exec_compatible_with = {compatible_with},
    toolchain = "@{repository_name}_{platform}//:{toolchain_name}",
    toolchain_type = "@{root_repository_name}//:{toolchain_type_name}",
)
""".format(
            tool = repository_ctx.attr.tool,
            platform = platform,
            compatible_with = meta["exec_compatible_with"],
            repository_name = repository_ctx.attr.repository_name,
            toolchain_name = repository_ctx.attr.toolchain_name,
            root_repository_name = repository_ctx.attr.root_repository_name,
            toolchain_type_name = repository_ctx.attr.toolchain_type_name,
        )

    # Base BUILD file for this repository
    repository_ctx.file("BUILD.bazel", build_content)

toolchains_repo = repository_rule(
    _toolchains_repo_impl,
    doc = """Creates a repository with toolchain definitions for all known platforms
     which can be registered or selected.""",
    attrs = {
        "tool": attr.string(),
        "repository_name": attr.string(),
        "toolchain_name": attr.string(),
        "root_repository_name": attr.string(),
        "toolchain_type_name": attr.string(),
    },
)
